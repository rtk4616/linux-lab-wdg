#!/bin/bash
#
# run -- Run the docker image of the lab
#

TOP_DIR=$(cd $(dirname $0) && pwd)/../../
source $TOP_DIR/tools/docker/config $* >/dev/null

# Check container conflicts
[ -n "$CONTAINER_ID" ] \
    && (docker ps -f id=$CONTAINER_ID | grep -v PORTS) \
    && echo "LOG: $CONTAINER_ID exist, remove it before create new." \
    && echo "LOG: $LAB_CONTAINER_ID" \
    && exit 1

# Generate an unique local port
RETRY_COUNT=0

while :;
do
    [ -z "$LOCAL_VNC_PORT" -o $RETRY_COUNT -ne 0 ] && LOCAL_VNC_PORT=`get_vnc_port`
    echo "LOG: OUR PORT: $LOCAL_VNC_PORT"

    ports=`docker ps -a --format="{{.Ports}}" | tr ',' '\n' | grep ":" | cut -d':' -f2 | cut -d'-' -f1 | sort -u | tr '\n' ' '`
    [ -n "$ports" ] && echo "LOG: OLD PORTS: $ports"

    RETRY_COUNT=1
    for port in $ports; do [ $LOCAL_VNC_PORT -eq $port ] && RETRY_COUNT=2 && break; done

    [ $RETRY_COUNT -eq 1 ] && break
    echo "LOG: Retry $RETRY_COUNT to get a unique port"
done

LOCAL_SSH_PORT=`get_ssh_port $LOCAL_VNC_PORT`
LOCAL_WEB_PORT=`get_web_port $LOCAL_VNC_PORT`
LOCAL_WEBSSH_PORT=`get_webssh_port $LOCAL_VNC_PORT`

# Require to prepare some environment for docker containers in host
[ -f $LAB_HOST_RUN ] && $LAB_HOST_RUN

# Run the lab via start a lab container
caps=""
devs=""
vars="-e LAB_SECURITY=$LAB_SECURITY"
envs=""
portmap="-p $LOCAL_VNC_PORT:$REMOTE_VNC_PORT"
portmap="$portmap -p $LOCAL_SSH_PORT:$REMOTE_SSH_PORT"
portmap="$portmap -p $LOCAL_WEB_PORT:$REMOTE_WEB_PORT"
portmap="$portmap -p $LOCAL_WEBSSH_PORT:$REMOTE_WEBSSH_PORT"
volumemap="-v $GIT_DIR:$GIT_WORKDIR"
volumemap="$volumemap -v $LAB_DIR:$LAB_WORKDIR"
volumemap="$volumemap -v $TOOL_DIR:$TOOL_WORKDIR"
volumemap="$volumemap -v $CONFIG_DIR:$CONFIG_WORKDIR"
limits=$LIMITS

for var in $VARS; do vars="$vars -e $var=$(eval echo \$${var})"; done
for env in $ENVS; do vars="$vars -e $env"; done
for cap in $CAPS; do caps="$caps --cap-add $cap"; done
for dev in $DEVICES; do devs="$devs --device $dev"; done
for map in $PORTMAP; do portmap="$portmap -p $map"; done
for map in $VOLUMEMAP; do volumemap="$volumemap -v $map"; done

CONTAINER_NAME=${LAB_NAME}-${LOCAL_VNC_PORT}
container="--name $CONTAINER_NAME"
# Remove the old one if exist
(docker ps -a | grep -q $CONTAINER_NAME) && docker rm -f $CONTAINER_NAME

# Sync UID before running
UNIX_UID=`id -u $HOST_USER`

do_unlock
set_var UNIX_UID
do_lock

CONTAINER_ID=$(docker run -d --privileged $container $portmap $caps $devices $limits $volumemap $vars $IMAGE)

CONTAINER_ID=${CONTAINER_ID:0:12}

echo "LOG: Wait for lab launching..."
while :; do
    password=`docker logs $CONTAINER_ID 2>/dev/null | grep Password`
    sleep 2
    [ -n "$password" ] && break
done


echo "LOG: Container ID: ${CONTAINER_ID} Container Name: ${CONTAINER_NAME}"
echo "LOG: $password"

UNIX_PWD=`echo $password | sed -e "s/.* Password: \([^ ]*\) .*/\1/g"`
VNC_PWD=`echo $password | sed -e "s/.* VNC Password: \(.*\)$/\1/g"`

do_unlock

# Save the lab's information
vars="CONTAINER_ID CONTAINER_NAME LOCAL_VNC_PORT UNIX_PWD VNC_PWD"
for var in $vars; do set_var $var; done

do_lock

# Login the lab: issue all available login methods
WEB=`is_web_exposed`
[ $WEB -eq 0 ] && $DOCKER_WEB_CMD $*

WEBSSH=`is_webssh_exposed`
[ $WEBSSH -eq 0 ] && $DOCKER_WEBSSH_CMD $*

VNC=`is_vnc_exposed`
[ $VNC -eq 0 ] && $DOCKER_VNC_CMD $*

[ -z "$LAB_BATCH" -o "$LAB_BATCH" == "0" ] && $DOCKER_SSH_CMD $*
