#!/bin/bash

# no argument required of config for container
IN_CONTAINER_CMD=1
source /tools/docker/config >/dev/null

# Don't touch me
DEF_USER=ubuntu

do_unlock

[ -z "$UNIX_USER" ] && get_var UNIX_USER $DEF_USER

get_var HOST_NAME localhost
get_var UNIX_IDENTIFY 1
get_var SUDO_IDENTIFY 0
get_var UNIX_UID 1000
set_var UNIX_UID

# Update PS1 of the TERM
bash -c "sed -i -e 's%PS1=.*$%PS1=\"$UNIX_USER@$IMAGE\$ \"%g' /etc/skel/.bashrc"

# create a ubuntu user

HOME=/home/$UNIX_USER
DEF_HOME=/home/$DEF_USER
DEF_SYSTEM_SUDOERS_USER=/etc/sudoers.d/$DEF_USER
DESKTOP=$HOME/Desktop/

[ $SUDO_IDENTIFY -eq 1 ] && UNIX_USER_GROUPS="--groups adm,sudo"
[ $SUDO_IDENTIFY -eq 0 ] && UNIX_USER_GROUPS=""

# The old one should be removed before create a new one
id -u $UNIX_USER &>/dev/null && userdel -f -r $UNIX_USER
rm -rf $HOME

useradd --uid $UNIX_UID --create-home --shell /bin/bash --user-group $UNIX_USER_GROUPS $UNIX_USER

# Install more system configuration files
[ ! -d $DESKTOP ] && mkdir $DESKTOP

for system in $CONFIG_SYSTEM_DIR $CORE_SYSTEM_DIR
do
  for f in `find $system -type f | sed -e "s%$system%%g"`
  do
    d=$(echo $f | sed -e "s%$DEF_HOME%$HOME%g")
    dest=`dirname $d`
    [ ! -d $dest ] && mkdir -p $dest
    cp $system/$f $d
  done
done

SYSTEM_SUDOERS_USER=/etc/sudoers.d/$UNIX_USER
[ -f "$DEF_SYSTEM_SUDOERS_USER" ] \
    && mv $DEF_SYSTEM_SUDOERS_USER $SYSTEM_SUDOERS_USER \
    && sed -i -e "s/^$DEF_USER/$UNIX_USER/g" $SYSTEM_SUDOERS_USER \
    && chmod 440 $SYSTEM_SUDOERS_USER

chown $UNIX_USER:$UNIX_USER -R $HOME/

[ -d /usr/share/desktop/home/.config ] \
    && sudo -u $UNIX_USER -i bash -c "cp -r /usr/share/desktop/home/{.[^.]*,*} /home/$UNIX_USER/" 2>&1 >/dev/null

# Create password, ENV > CONF > PWGEN

[ -z "$UNIX_PWD" ] && get_var UNIX_PWD
[ -z "$VNC_PWD" ] && get_var VNC_PWD

[ -z "$UNIX_PWD" ] && UNIX_PWD=`pwgen -c -n -s -1 15`
[ -z "$VNC_PWD" ] && VNC_PWD=`pwgen -c -n -s -1 15`

[ -n "$UNIX_USER" ] && set_var UNIX_USER
[ -n "$UNIX_PWD" ] && set_var UNIX_PWD
[ -n "$VNC_PWD" ] && set_var VNC_PWD

# Sync UID between host and container
FILES_TO_SYN_PERM="$LAB_UNIX_PWD $LAB_VNC_PWD $LAB_UNIX_UID $LAB_UNIX_USER"
sudo chown $UNIX_USER:$UNIX_USER $FILES_TO_SYN_PERM
sudo chmod a+w $FILES_TO_SYN_PERM

do_lock

# Don't touch me: otherwise, need to modify tools/docker/run
echo "User: $UNIX_USER Password: $UNIX_PWD VNC Password: $VNC_PWD"

SYSTEM_SUPERVISORD_CONF=/etc/supervisor/conf.d/x11vnc.conf
if [ "$UNIX_USER" != "$DEF_USER" ]; then
    sed -i -e "s%$DEF_HOME%$HOME%g" $SYSTEM_SUPERVISORD_CONF
    sed -i -e "s%user=$DEF_USER%user=$UNIX_USER%g" $SYSTEM_SUPERVISORD_CONF
fi

# VNC PASS
which x11vnc 2>&1>/dev/null
if [ $? -eq 0 ]; then
    VNC_PWD_FILE=$HOME/.vnc/passwd
    [ ! -d $HOME/.vnc ] && mkdir -p $HOME/.vnc
    x11vnc -storepasswd $VNC_PWD $VNC_PWD_FILE

    # Disable the VNC login password
    get_var VNC_IDENTIFY 1
    [ $VNC_IDENTIFY -eq 0 -a "$HOST_NAME" == "localhost" ] \
        && sed -i -e "s% -rfbauth $VNC_PWD_FILE$%%g" $SYSTEM_SUPERVISORD_CONF
fi

# UNIX PASS
echo "$UNIX_USER:$UNIX_PWD" | chpasswd

# Lock UNIX Password?
[ $UNIX_IDENTIFY -eq 0 ] && passwd -l $UNIX_USER
[ $UNIX_IDENTIFY -eq 1 ] && passwd -u $UNIX_USER

# mount tmpfs
mount -t tmpfs none /tmp/

# Run Lab specific tasks
[ -x $LAB_CONTAINER_RUN ] && UNIX_USER=$UNIX_USER $LAB_CONTAINER_RUN

# Run image built-in tasks
for f in /etc/startup.aux/*.sh
do
    . $f
done

# Launch supervisor tasks

SYSTEM_SUPERVISORD_CONF=/etc/supervisor/supervisord.conf
/usr/bin/supervisord -n -c $SYSTEM_SUPERVISORD_CONF
